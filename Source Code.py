# -*- coding: utf-8 -*-
"""GenderKlasifikasi.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UtKIhM5qWqxuSXhC7Dt1h-s6-WffbIBn
"""

from google.colab import drive
drive.mount('/content/drive')

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Conv2D, Flatten, Dropout, MaxPooling2D
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from keras.optimizers import Adam

import os
import numpy as np
import matplotlib.pyplot as plt
import pathlib

train_dir = pathlib.Path('/content/drive/My Drive/projek/dataset/train')
validation_dir = pathlib.Path('/content/drive/My Drive/projek/dataset/valid')
tes_dir = pathlib.Path('/content/drive/My Drive/projek/dataset/test')

train_image_generator = ImageDataGenerator(rescale=1./255) # Generator for our training data
validation_image_generator = ImageDataGenerator(rescale=1./255) # Generator for our validation data
tes_image_generator = ImageDataGenerator(rescale=1./255) # Generator for our validation data

import pathlib
import numpy as np
data_dir = "/content/drive/My Drive/projek/dataset/train"
data_dir = pathlib.Path(data_dir)
kelas = np.array([item.name for item in sorted(data_dir.glob('*')) if item.name != "LICENSE.txt"])
kelas

Target_Size = (150,150)

train_data_gen = train_image_generator.flow_from_directory(batch_size=120,
                                                           directory=train_dir,
                                                           shuffle=True,
                                                           subset="training",
                                                           seed=42,
                                                           color_mode="rgb",
                                                           target_size=Target_Size,
                                                           class_mode='categorical')

tes_data_gen = tes_image_generator.flow_from_directory(batch_size=120,
                                                           directory=tes_dir,
                                                           shuffle=False,
                                                           seed=42,
                                                           color_mode="rgb",
                                                           target_size=Target_Size,
                                                           class_mode='categorical')

val_data_gen = validation_image_generator.flow_from_directory(batch_size=3,
                                                           directory=validation_dir,
                                                           shuffle=False,
                                                           seed=42,
                                                           color_mode="rgb",
                                                           target_size=Target_Size,
                                                           class_mode='categorical')

model = tf.keras.models.Sequential([
    # Note the input shape is the desired size of the image 150x150 with 3 bytes color
    # This is the first convolution
    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(150, 150, 3)),
    tf.keras.layers.MaxPooling2D(2, 2),
    # The second convolution
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    #The tgird convolution
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    # The fourth convolution
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Dropout(0.25),
    # The fiveth convolution
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    # Flatten the results to feed into a DNN
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dropout(0.25),
    # 512 neuron hidden layer
    tf.keras.layers.Dense(512, activation='relu'),
    tf.keras.layers.Dense(2, activation='softmax')
])

model.summary()

model.compile(loss = 'categorical_crossentropy', 
              optimizer=Adam (0.001), 
              metrics=['accuracy'])

history = model.fit(train_data_gen, 
                    epochs=10, 
                    steps_per_epoch=20, 
                    validation_data = tes_data_gen, 
                    verbose = 1, 
                    validation_steps=2)

model.save("rps.h5")

model.evaluate(tes_data_gen)
import matplotlib.pyplot as plt
acc = history.history['accuracy']
val_acc = history.history['val_accuracy']
loss = history.history['loss']
val_loss = history.history['val_loss']

epochs = range(len(acc))

plt.plot(epochs, acc, 'r', label='Training accuracy')
plt.plot(epochs, val_acc, 'b', label='Validation accuracy')
plt.title('Training and validation accuracy')
plt.legend(loc=0)
plt.figure()


plt.show()

from PIL import Image
from skimage import transform
import matplotlib.image as mpimg
def load(filename):
   np_image = Image.open(filename)
   np_image = np.array(np_image).astype('float32')/255
   np_image = transform.resize(np_image, (150, 150, 3))
   np_image = np.expand_dims(np_image, axis=0)
   return np_image

pathimg = "/content/drive/My Drive/projek/dataset/valid/180003.jpg"
img = load(pathimg)
print(img.shape)
prediction = model.predict(img)
hasil = kelas[np.argmax(prediction)]
imgshow = mpimg.imread(pathimg)
plt.imshow(imgshow)
plt.show()
print("hasil prediksi = {}".format(hasil))

from PIL import Image
from skimage import transform
import matplotlib.image as mpimg
def load(filename):
   np_image = Image.open(filename)
   np_image = np.array(np_image).astype('float32')/255
   np_image = transform.resize(np_image, (150, 150, 3))
   np_image = np.expand_dims(np_image, axis=0)
   return np_image

pathimg = "/content/drive/My Drive/projek/dataset/valid/180033.jpg"
img = load(pathimg)
print(img.shape)
prediction = model.predict(img)
hasil = kelas[np.argmax(prediction)]
imgshow = mpimg.imread(pathimg)
plt.imshow(imgshow)
plt.show()
print("hasil prediksi = {}".format(hasil))

from PIL import Image
from skimage import transform
import matplotlib.image as mpimg
def load(filename):
   np_image = Image.open(filename)
   np_image = np.array(np_image).astype('float32')/255
   np_image = transform.resize(np_image, (150, 150, 3))
   np_image = np.expand_dims(np_image, axis=0)
   return np_image

pathimg = "/content/drive/MyDrive/projek/dataset/valid/180006.jpg"
img = load(pathimg)
print(img.shape)
prediction = model.predict(img)
hasil = kelas[np.argmax(prediction)]
imgshow = mpimg.imread(pathimg)
plt.imshow(imgshow)
plt.show()
print("hasil prediksi = {}".format(hasil))

from PIL import Image
from skimage import transform
import matplotlib.image as mpimg
def load(filename):
   np_image = Image.open(filename)
   np_image = np.array(np_image).astype('float32')/255
   np_image = transform.resize(np_image, (150, 150, 3))
   np_image = np.expand_dims(np_image, axis=0)
   return np_image

pathimg = "/content/drive/My Drive/projek/dataset/valid/180070.jpg"
img = load(pathimg)
print(img.shape)
prediction = model.predict(img)
hasil = kelas[np.argmax(prediction)]
imgshow = mpimg.imread(pathimg)
plt.imshow(imgshow)
plt.show()
print("hasil prediksi = {}".format(hasil))

from PIL import Image
from skimage import transform
import matplotlib.image as mpimg
def load(filename):
   np_image = Image.open(filename)
   np_image = np.array(np_image).astype('float32')/255
   np_image = transform.resize(np_image, (150, 150, 3))
   np_image = np.expand_dims(np_image, axis=0)
   return np_image

pathimg = "/content/female (651).jpg"
img = load(pathimg)
print(img.shape)
prediction = model.predict(img)
hasil = kelas[np.argmax(prediction)]
imgshow = mpimg.imread(pathimg)
plt.imshow(imgshow)
plt.show()
print("hasil prediksi = {}".format(hasil))

